@model CompanyManagement.Models.OrderViewModel
@{
    ViewBag.Title = "فاتورة جديدة";
}
<script src="~/Scripts/jquery-3.4.1.js"></script>

<style>

    #addCustmoer,#AddProduct {
        cursor: pointer;
        color: #007bff;
    }

    #addCustmoer:hover, #AddProduct:hover{
        text-decoration: underline;
    }
</style>

<h2>فاتورة جديدة</h2>
<hr />
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <fieldset class="orderfieldset_base">
        @*<legend>الفاتورة</legend>*@
        <div class="row">
            <div class="col-xl-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.custom_order_id, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Order.custom_order_id, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.custom_order_id, "", htmlAttributes: new { @class = "text-danger",@id="order_id_validation" })
                </div>
            </div>
            <div class="col-xl-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.customer_id, htmlAttributes: new { @class = "control-label" })
                    <select name="customer_id" id="customer_id" class="form-control">
                        <option value="" selected hidden>-- اختار العميل</option>
                        @foreach (var client in Model.Customers)
                        {
                            <option value="@client.id">@client.name</option>
                        }
                    </select>
                    @Html.ValidationMessageFor(model => model.Order.customer_id, "", htmlAttributes: new { @class = "text-danger" })
                    <small><a id="addCustmoer" onclick="AddCustomer()">إضافة عميل جديد <i class="fa fa-plus-circle"></i></a></small>
                </div>
            </div>
            <div class="col-xl-4">
                <div class="form-group">
                    <label for="orderkind">نوع الفاتورة</label>
                    <select name="order_type" id="order_type" class="form-control">
                        <option value="0" hidden selected>-- اختار نوع الفاتورة</option>
                        <option value="@Model.OrderType[0]">@Model.OrderType[0]</option>
                        <option value="@Model.OrderType[1]">@Model.OrderType[1]</option>
                    </select>
                    @Html.ValidationMessageFor(model => model.Order.order_type, "", htmlAttributes: new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </fieldset>

    <fieldset class="orderfieldset">
        <div class="row">
            <div class="col-xl-4">
                <div class="form-group">
                    <label for="product_id" class="control-label">المنتج</label>
                    <select name="product_id" id="product_id" class="form-control">
                        <option value="" selected hidden>-- اختار المنتج</option>
                        @foreach (var item in Model.Products)
                        {
                            <option value="@item.id">@item.name</option>
                        }
                    </select>
                    @Html.ValidationMessageFor(model => model.OrderDetail.product_id, "", htmlAttributes: new { @class = "text-danger" })
                    <small><a id="AddProduct" onclick="AddProduct()">إضافة منتج جديد <i class="fa fa-plus-circle"></i></a></small>

                </div>
            </div>
            <div class="col-xl-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.OrderDetail.unit_price, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.OrderDetail.unit_price, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.OrderDetail.unit_price, "", htmlAttributes: new { @class = "text-danger" })
                    <small id="available_quantity_txt" style="color:forestgreen;font-weight:bold"></small>
                </div>
            </div>
            <div class="col-xl-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.OrderDetail.quantity, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.OrderDetail.quantity, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrderDetail.quantity, "", htmlAttributes: new { @class = "text-danger",@id = "quantity_validation" })
                    <input type="hidden" id="available_quantity_value"/>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-xl-4">
                <div class="form-group">
                @Html.LabelFor(model => model.OrderDetail.discount, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.OrderDetail.discount, new { htmlAttributes = new { @class = "form-control", @type = "number" } })
                @Html.ValidationMessageFor(model => model.OrderDetail.discount, "", htmlAttributes: new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-xl-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.OrderDetail.total_price, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.OrderDetail.total_price, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.OrderDetail.total_price, "", htmlAttributes: new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-xl-4">
                <div class="form-group">
                    <button class="btn btn-success" id="AddItems" style="margin-top:31px" onclick="AddItemsToTable()">إضافة الى الفاتورة</button>
                </div>
            </div>
        </div>
    </fieldset>

    <fieldset class="orderfieldset" style="max-height:300px;overflow-y:scroll">
        <table class="table" id="ItemListOfSubOrders">
            <thead>
                <tr>
                    <th hidden></th>
                    <th>المنتج</th>
                    <th>السعر</th>
                    <th>الكمية</th>
                    <th>discount</th>
                    <th>الاجمالى</th>
                    <th></th>
                </tr>
            </thead>
        </table>
    </fieldset>
    <fieldset class="orderfieldset">
        <div class="row">
            <div class="col-xl-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.total_payment,htmlAttributes: new {@class="control-label" })
                    @Html.EditorFor(model => model.Order.total_payment, new { htmlAttributes = new {@class ="form-control",@disabled="disabled"}})
                    @Html.ValidationMessageFor(model => model.Order.total_payment,"",htmlAttributes: new { @class="text-danger"})
                </div>
            </div>
            <div class="col-xl-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.payment_amount, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Order.payment_amount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Order.payment_amount, "", htmlAttributes: new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-xl-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.Order.rest_amount, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Order.rest_amount, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                    @Html.ValidationMessageFor(model => model.Order.rest_amount, "", htmlAttributes: new { @class = "text-danger" })
                </div>
            </div>           
                       
        </div>
    </fieldset>
    <div style="text-align:center">
        <button id="CreateBill" type="button" class="btn btn-outline-primary" onclick="PlaceAnOrder()">حفظ الفاتورة</button>
    </div>
    
}

<!-- Modal Add Customer -->
<div class="modal fade" id="AddCustomerModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="col-12 modal-title text-center" id="exampleModalLongTitle">إضافة عميل جديد</h5>
            </div>
            <div class="col-12 modal-body text-center" style="direction:rtl;">
                <div class="form-group">
                    <input type="text" id="CustomerModal_Name" class="col-12 form-control text-center" placeholder="أسم العميل" />
                </div>
                <div class="form-group">
                    <input type="text" id="CustomerModal_Phone" class="col-12 form-control text-center" placeholder="الهاتف" />
                </div>
                <div class="form-group">
                    <input type="email" id="CustomerModal_Email" class="col-12 form-control text-center" placeholder="البريد الالكترونى" />
                </div>
                <div class="form-group" style="text-align:center">
                    <select name="type" id="CustomerModal_Type" class="col-12 form-control">
                        <option value="0" selected hidden>اختار نوع العميل -- </option>
                        <option value="مورد">مورد</option>
                        <option value="زبون">زبون</option>
                        <option value="مورد/زبون">مورد / زبون</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" id="CloseModal_cust">إلغاء</button>
                <button type="button" onclick="CreateCustomer()" class="btn btn-primary">حفظ</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal Add Product -->
<div class="modal fade" id="AddProductModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="col-12 modal-title text-center" id="exampleModalLongTitle">إضافة منتج جديد</h5>
            </div>
            <div class="col-12 modal-body text-center" style="direction:rtl;">
                <div class="form-group">
                    <input type="text" id="ProductModal_Code" class="col-12 form-control text-center" placeholder="كود المنتج" />
                </div>
                <div class="form-group">
                    <input type="text" id="ProductModal_Name" class="col-12 form-control text-center" placeholder="اسم المنتج" />
                </div>
                <div class="form-group">
                    <input type="number" id="ProductModal_Vat" class="col-12 form-control text-center" placeholder="القيمة المضافة" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" id="CloseModal_pro">إلغاء</button>
                <button type="button" onclick="CreateProduct()" class="btn btn-primary">حفظ</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal Order Placed-->
<div class="modal fade" id="OrderPlaced" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="col-12 modal-body text-center" style="direction:rtl;">
                
                <p>تم حفظ الفاتورة بنجاح</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" data-dismiss="modal">تم</button>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        $('form').submit(function (e) {
            e.preventDefault();
        });
        // check if order number duplicated
        $("#Order_custom_order_id").on("keyup", function () {
            var order_id = $("#Order_custom_order_id").val();
            IsOrderIdFounded(order_id);
        });
        // Get Product Price
        $('#product_id').on('change', function () {
            var productId = $("#product_id").val();
            GetPriceOfProduct(productId);
        });
        $('#order_type').on('change', function () {
            var order_type = $("#order_type").val();
            if (order_type == "شراء")
                $("#OrderDetail_unit_price").removeAttr("disabled");
            else
                $("#OrderDetail_unit_price").attr("disabled", "disabled");

            if ($("#order_type").val() == 0)
                $(".orderfieldset").attr("disabled", "disabled");
            else
                $(".orderfieldset").removeAttr("disabled");
        });
        // Calculate Total SubOrder
        $("#OrderDetail_quantity").on("keyup keypress", function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 13) {
                e.preventDefault();
                return false;
            }
            
            var avaliable_quan = parseFloat($("#available_quantity_value").val());
            var required_qaun = parseFloat($("#OrderDetail_quantity").val());
            if ($("#order_type").val() == "بيع" && required_qaun > avaliable_quan) {
                $("#quantity_validation").text("الكمية المطلوبة اكبر من الكمية المتاحة");
                $("#AddItems").attr("disabled", "disabled");
            }
            else if (required_qaun <= 0) {
                $("#quantity_validation").text("لايمكن ادخال كمية اقل من او تساوى 0");
                $("#AddItems").attr("disabled", "disabled");
            }
            else {      
                var total = TotalSubOrder();
                if (total == "NaN")
                    $("#OrderDetail_total_price").val("");
                else
                    $("#OrderDetail_total_price").val(total);
                $("#quantity_validation").text("");
                $("#AddItems").removeAttr("disabled");
            }
            
        });
        // Calculate Total SubOrder after discount
        $("#OrderDetail_discount").on("keyup keypress", function (e) {
            var keyCode = e.keyCode || e.which;
            if (keyCode === 13) {
                e.preventDefault();
                return false;
            }
            var new_total = TotalSubOrder_OnDiscount();
            console.log(new_total);
            if (new_total != "NaN")
                $("#OrderDetail_total_price").val(new_total);
            else
                $("#OrderDetail_total_price").val(TotalSubOrder());
        });
        $("#Order_payment_amount").on("keyup", function () {
            CalcRest();
        })
        if ($("#order_type").val() == 0)
            $(".orderfieldset").attr("disabled", "disabled");
    });

    function TotalSubOrder() {
        var unit_price = parseFloat($("#OrderDetail_unit_price").val());
        var quantity = parseFloat($("#OrderDetail_quantity").val());
        return parseFloat(unit_price * quantity).toFixed(2);
    }
    function TotalSubOrder_OnDiscount() {
        var discount = parseFloat($("#OrderDetail_discount").val());
        var total = parseFloat($("#OrderDetail_total_price").val());
        return parseFloat(total - (total * (discount / 100))).toFixed(2);
    }

    function AddItemsToTable() {
        if ($("#product_id").val() != "") {
            if ($("#OrderDetail_quantity").val() != "" &&
                $("#OrderDetail_quantity").val() != "0") {
                var tblItemList = $("#ItemListOfSubOrders");
                var product_id = $("#product_id").val();
                var product_name = $("#product_id option:selected").text();
                var unit_price = $("#OrderDetail_unit_price").val();
                var quantity = $("#OrderDetail_quantity").val();
                var discount;
                if ($("#OrderDetail_discount").val() != '')
                    discount = $("#OrderDetail_discount").val();
                else
                    discount = 0;

                var total_price = $("#OrderDetail_total_price").val();
                var ItemList =
                    "<tr><td hidden>" +
                    product_id
                    + "</td><td>"
                    + product_name
                    + "</td><td>"
                    + unit_price
                    + "</td><td>"
                    + quantity
                    + "</td><td>"
                    + discount
                    + "%</td><td>"
                    + total_price
                    + "</td><td><button class='btn btn-danger' onclick='RemoveSubOrder(this)'>حذف</button>"
                    + "</td></tr>";
                tblItemList.append(ItemList);
                CalcFinalTotal();
                ResetSubOrder();
            } else {
                alert("يجب ان تكون الكمية اكبر من 0");
                $("#OrderDetail_quantity").focus();
            }
        } else {
            alert("يجب اختيار منتج");
            $("#product_id").focus();
        }
    }
    function CalcFinalTotal() {
        $("#Order_total_payment").val("0.00");
        var FinalTotal = 0.00;
        $("#ItemListOfSubOrders").find("tr:gt(0)").each(function () {
            var total = parseFloat($(this).find("td:eq(5)").text());
            FinalTotal += total;
        })
        $("#Order_total_payment").val(FinalTotal.toFixed(2));
    }
    function CalcRest() {
        
        var total = parseFloat($("#Order_total_payment").val());
        var amount = parseFloat($("#Order_payment_amount").val());
        var rest = amount - total;
        if ($("#Order_total_payment").val() == "") {
            $("#Order_rest_amount").val("0.00");
        } else {
            $("#Order_rest_amount").val(rest.toFixed(2));
        }
    }
    function ResetSubOrder() {
        $("#product_id").val(0);
        $("#OrderDetail_unit_price").val('');
        $("#OrderDetail_quantity").val('');
        $("#OrderDetail_discount").val('');
        $("#OrderDetail_total_price").val('');
        $("#available_quantity_txt").text('');
    }
    function ResetOrder() {
        $("#Order_custom_order_id").val("");
        $("#customer_id").val(0);
        $("#order_type").val(0);
        RemoveSubOrder();
        ClearTableOfSubOrders();
        $("#Order_total_payment").val("");
        $("#Order_payment_amount").val("");
        $("#Order_rest_amount").val("");

    }
    function ClearTableOfSubOrders() {
        $("#ItemListOfSubOrders").find("tr:gt(0)").each(function () {
            $(this).remove();
        })
    }
    function RemoveSubOrder(ItemId) {
        var totalsuborder = parseFloat($(ItemId).closest('tr').find("td:eq(5)").text());
        var final_total = parseFloat($("#Order_total_payment").val());
        var new_final_total = final_total - totalsuborder;
        $("#Order_total_payment").val(new_final_total.toFixed(2));
        $(ItemId).closest('tr').remove();
    }
    function PreventEnterKeyPress(e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === 13) {
            e.preventDefault();
            return false;
        }
    }

    function IsTableEmpty() {
        var i = 0;
        $("#ItemListOfSubOrders").find("tr:gt(0)").each(function () {
            i = i + 1;
        })
        return i;
    }

    // Add Customer
    function AddCustomer() {
        $('#AddCustomerModal').appendTo("body").modal('show');
    }
    // Add Product
    function AddProduct() {
        $('#AddProductModal').appendTo("body").modal('show');
    }
    // Add Order
    function OrderPlaced() {
        $('#OrderPlaced').appendTo("body").modal('show');
    } 
    // Ajax Calls
    function IsOrderIdFounded(orderId) {
        $.ajax({
            async: true,
            type: "Get",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            url: "/Orders/IsOrderIdFounded",
            data: { orderId: orderId },
            success: function (data) {
                if (!data) {
                    $("#order_id_validation").text("");
                    $("#Order_custom_order_id").attr("style", "color:green;font-weight:bold");
                    $("#CreateBill").removeAttr("disabled");
                }
                else {
                    $("#Order_custom_order_id").attr("style", "color:red;font-weight:bold");
                    $("#order_id_validation").text("هذا الرقم مكرر !!");
                    $("#CreateBill").attr("disabled", "disabled");
                }
            },
            error: function(){
                console.log("erorr!!!");
        }

        })
    }
    function GetPriceOfProduct(productId) {
        $.ajax({
            async: true,
            type: "GET",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            url: "/Orders/GetProductPrice",
            data: { productId: productId },
            success: function (result) {
                $("#OrderDetail_unit_price").val(parseFloat(result[0]).toFixed(2));
                $("#available_quantity_txt").text("متوفر " + result[1] + " قطعة على هذا السعر");
                $("#available_quantity_value").val(result[1]);
            },
            error: function (xhr) {
                alert("المنتج غير متوفر فى المخزن");
            },
        });
    }

    function PlaceAnOrder() {
        if ($("#Order_custom_order_id").val() == "") {
            alert("يجب ادخال رقم الفاتورة");
            $("#Order_custom_order_id").focus();
            return;
        }
        if ($("#customer_id").val() == 0) {
            alert("يجب اختيار عميل");
            $("#customer_id").focus();
            return;
        }
        if ($("#order_type").val() == 0) {
            alert("يجب اختيار نوع الفاتورة");
            $("#order_type").focus();
            return;
        }
        if (IsTableEmpty() == 0) {
            alert("لا يمكن حفظ فاتورة فارغة");
            $("#product_id").focus();
            return;
        }
        if (parseFloat($("#Order_rest_amount").val()) < 0) {
            alert("المبلغ المدفوع اقل من قيمة اجمالى الفاتورة");
            $("#Order_payment_amount").focus();
            return;
        }
        if ($("#Order_payment_amount").val() == "") {
            alert("يجب ادخال المبلغ المدفوع");
            $("#Order_payment_amount").focus();
            return;
        }
        var Order = {};
        var OrderDetails = new Array();
        Order.custom_order_id = $("#Order_custom_order_id").val();
        Order.customer_id = $("#customer_id").val();
        Order.order_type = $("#order_type").val();
        Order.total_payment = $("#Order_total_payment").val();
        Order.payment_amount = $("#Order_payment_amount").val();
        Order.rest_amount = $("#Order_rest_amount").val();
        Order.order_date = Date.now();
        $("#ItemListOfSubOrders").find("tr:gt(0)").each(function () {
            var SingleOrderDetails = {};
            SingleOrderDetails.order_id = $("#Order_custom_order_id").val();
            SingleOrderDetails.product_id = parseInt($(this).find("td:eq(0)").text());
            SingleOrderDetails.unit_price = parseFloat($(this).find("td:eq(2)").text());
            SingleOrderDetails.quantity = parseInt($(this).find("td:eq(3)").text());
            SingleOrderDetails.discount = parseFloat($(this).find("td:eq(4)").text());
            SingleOrderDetails.total_price = parseFloat($(this).find("td:eq(5)").text());
            SingleOrderDetails.order_data = Date.now();
            OrderDetails.push(SingleOrderDetails);
        });
        Order.OrderDetails = OrderDetails;

        $.ajax({
            async: true,
            type: "POST",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            url: "/Orders/CreateOrder",
            data: JSON.stringify(Order),
            success: function (data) {
                OrderPlaced();
                ResetOrder();
            },
            error: function () {
                alert("حدث مشكلة اثناء حفظ الفاتورة");
            }
        });
    }

    function CreateCustomer() {
        Customer = {};
        Customer.name = $("#CustomerModal_Name").val();
        Customer.phone = $("#CustomerModal_Phone").val();
        Customer.email = $("#CustomerModal_Email").val();
        Customer.type = $("#CustomerModal_Type").val();
        $.ajax({
            async: true,
            type: "post",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            url: "/Customers/CreateCustomer",
            data: JSON.stringify(Customer),
            success: function (data) {
                $("#CloseModal_cust").click();
                alert("تم إضافة العميل: " + data.name);
                resetCreateCustomerForm();
                var new_customer = "<option value='" + data.id + "'>" + data.name + "</option>";
                $("#customer_id").append(new_customer);
            },
            error: function () {

            }
        });
    }
    function resetCreateCustomerForm() {
        $("#CustomerModal_Type").val(0);
        $("#CustomerModal_Name").val('');
        $("#CustomerModal_Phone").val('');
        $("#CustomerModal_Email").val('');
    }

    function CreateProduct() {
        Product = {};
        Product.name = $("#ProductModal_Name").val();
        Product.code = $("#ProductModal_Code").val();
        Product.vat = $("#ProductModal_Vat").val();
        $.ajax({
            async: true,
            type: "post",
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            url: "/Products/CreateProduct",
            data: JSON.stringify(Product),
            success: function (data) {
                $("#CloseModal_pro").click();
                alert("تم إضافة المنتج: " + data.name);
                resetCreateProductForm();
                var new_product = "<option value='" + data.id + "'>" + data.name + "</option>";
                $("#product_id").append(new_product);
            },
            error: function () {

            }
        });
    }
    function resetCreateProductForm() {
        $("#ProductModal_Name").val('');
        $("#ProductModal_Code").val('');
        $("#ProductModal_Vat").val('');
    }
</script>



@*$('form').on("keyup keypress",function (e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === 13) {
            e.preventDefault();
            return false;
        }
    });*@
<!-- Button trigger modal -->
<!-- Modal -->
